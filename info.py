######СИНТАКСИС И ЛОГИКА#######
# hexadecimal(в шестнадцатеричной системе)
# Слово "кратный" в математике означает, что одно число делится на другое без остатка.
# != --- это означает сравнение, игнорируя типы данных

# >> --- это Сдвиг по битам вправо
# Здесь  правый сдвиг определён как деление на соответствующую степень двойки. 
>>> 22 >> 2
5
>>> 22 // 2**2
5


###########ПЕРЕМЕННЫЕ#############
# S представляет собой список сдвигов (shift values), которые используются в процессе работы функции MD5.
# T — это список констант, вычисленных с использованием квадратных корней и умножения на 2^32, которые используются для изменения хеша на каждом этапе работы алгоритма.

###########TO_BYTES###############
# Мы извлекаем только один байт из числа, игнорируя все остальные биты.
# Пример: если результат сдвига равен 0x12345678, то 0x12345678 & 0xFF даст нам 0x78 — только последние 8 бит.

# extend --- это добавление всех элементов из одного списка в конец другого списка.
list1 = [1, 2, 3]
list2 = [4, 5, 6]
list1.extend(list2)
print(list1)  # Вывод: [1, 2, 3, 4, 5, 6]


#########ROTATE_LEFT#############
# во-первых, данные value мы сдвигаем "shift" на влево  
# Во-вторых сдвигаем вправо, но нам нужно вернуть числа которые выпали из сдвига налево, это как раз 32-shift
# & 0xFFFFFFFF гарантирует что значение будет 32 бита


#########PROCESS_BLOCK#############
#block[i:i+4]: берет 4 байта данных из блока начиная с позиции i. Поскольку блок данных для MD5 — это всегда 512 бит (или 64 байта), то мы делаем это 16 раз (с шагом 4 байта).

#for i in range(0, 65, 4) -- генерирует числа с шагом 4 от 0 до 64

#int.from_bytes(bytes, byteorder)
data = b'\x01\x02\x03\x04'
number = int.from_bytes(data, 'little')
print(number)  # Выводит: 16909060 (0x04030201)